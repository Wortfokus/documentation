"use strict";(self.webpackChunkwortfokus=self.webpackChunkwortfokus||[]).push([[3572],{2479:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"projects/project-quiz/architecture/Decisions/adr-001-database-decision","title":"Database Decision Record","description":"Context","source":"@site/docs/projects/project-quiz/architecture/Decisions/adr-001-database-decision.md","sourceDirName":"projects/project-quiz/architecture/Decisions","slug":"/projects/project-quiz/architecture/Decisions/adr-001-database-decision","permalink":"/docs/projects/project-quiz/architecture/Decisions/adr-001-database-decision","draft":false,"unlisted":false,"editUrl":"https://github.com/Wortfokus/documentation/tree/main/docs/projects/project-quiz/architecture/Decisions/adr-001-database-decision.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Database Decision Record"},"sidebar":"projectsSidebar","previous":{"title":"Explanation","permalink":"/docs/projects/project-quiz/architecture/Decisions/main"}}');var r=n(4848),t=n(8453);const o={sidebar_label:"Database Decision Record"},a="Database Decision Record",l={},c=[{value:"Context",id:"context",level:2},{value:"Evaluation",id:"evaluation",level:2},{value:"PostgreSQL (Relational Database)",id:"postgresql-relational-database",level:3},{value:"MongoDB (Document Store)",id:"mongodb-document-store",level:3},{value:"Neo4j (Graph Database)",id:"neo4j-graph-database",level:3},{value:"Decision",id:"decision",level:2},{value:"Consequences",id:"consequences",level:2}];function d(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"database-decision-record",children:"Database Decision Record"})}),"\n",(0,r.jsx)(s.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(s.p,{children:"The project requires storing and managing data for a quiz application that includes:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Quizzes"})," with different types of questions (single-choice, multiple-choice, etc.)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Stories"})," consisting of sequential content elements (text, video, images, or questions)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"User progress tracking"})," (which story part has been reached, which sets/questions have been solved)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Multilingual support"}),", where questions and stories may exist in multiple languages."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Initially, there were three main options under consideration:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Relational Database (PostgreSQL)"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Document Store (MongoDB)"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Graph Database (Neo4j)"})}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"evaluation",children:"Evaluation"}),"\n",(0,r.jsx)(s.h3,{id:"postgresql-relational-database",children:"PostgreSQL (Relational Database)"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Pros"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Well-suited for structured data with clear relationships (users, sets, questions, answers)."}),"\n",(0,r.jsxs)(s.li,{children:["Excellent support for ",(0,r.jsx)(s.strong,{children:"multilingual content"})," using ",(0,r.jsx)(s.code,{children:"jsonb"})," fields to store translations."]}),"\n",(0,r.jsxs)(s.li,{children:["Easy to query sequential story elements with simple ordering (",(0,r.jsx)(s.code,{children:"ORDER BY position"}),")."]}),"\n",(0,r.jsx)(s.li,{children:"Mature ecosystem, strong support for transactions, and well-known tooling."}),"\n",(0,r.jsx)(s.li,{children:"Flexible: can handle relational data and semi-structured data (JSONB) in one system."}),"\n",(0,r.jsxs)(s.li,{children:["Easier to generate ",(0,r.jsx)(s.strong,{children:"statistics"})," (progress, completion rates, user activity) compared to Neo4j."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Cons"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Handling highly dynamic schemas (many question types with varying properties) can require careful design."}),"\n",(0,r.jsx)(s.li,{children:'Relationships (like friends, user progress graphs) are less "visual" than in Neo4j.'}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"mongodb-document-store",children:"MongoDB (Document Store)"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Pros"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Flexible schema, easy to add new question/answer formats."}),"\n",(0,r.jsx)(s.li,{children:"JSON-like storage makes multilingual content straightforward."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Cons"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Complex relations (e.g., users, stories, sets of questions) become harder to manage."}),"\n",(0,r.jsx)(s.li,{children:"More difficult to perform complex joins and statistics."}),"\n",(0,r.jsx)(s.li,{children:"Would likely require embedding or duplicating data, which complicates consistency."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"neo4j-graph-database",children:"Neo4j (Graph Database)"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Pros"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Naturally models relationships (user friendships, answered questions, story progression)."}),"\n",(0,r.jsx)(s.li,{children:"Intuitive for traversing non-linear stories or complex quiz graphs."}),"\n",(0,r.jsx)(s.li,{children:"Queries for connected data can be more elegant."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Cons"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Adds complexity since the project does not require ",(0,r.jsx)(s.strong,{children:"branching stories"})," (all stories are linear)."]}),"\n",(0,r.jsx)(s.li,{children:"Statistics and aggregations are harder compared to SQL."}),"\n",(0,r.jsx)(s.li,{children:"Migration of JSONB-based multilingual content is less straightforward."}),"\n",(0,r.jsx)(s.li,{children:"Smaller ecosystem compared to Postgres, fewer developers familiar with Cypher than SQL."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(s.p,{children:["We decided to use ",(0,r.jsx)(s.strong,{children:"PostgreSQL"})," as the primary database."]}),"\n",(0,r.jsx)(s.p,{children:"The reasoning:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Stories are linear"}),", so sequential content can be modeled with an ordered list in SQL."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Quizzes and Sets"})," are well-structured and map naturally to relational tables."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"User progress and statistics"})," are easier to calculate in SQL."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Multilingual content"})," can be handled with ",(0,r.jsx)(s.code,{children:"jsonb"}),", while also allowing sets and stories to declare their available languages for filtering."]}),"\n",(0,r.jsx)(s.li,{children:"PostgreSQL provides the flexibility to adapt if question formats evolve, without losing the advantages of relational integrity."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Neo4j was strongly considered, but its advantages would only be significant if stories became ",(0,r.jsx)(s.strong,{children:"non-linear"})," (branching narratives) or if relationship-heavy queries dominated the use cases.",(0,r.jsx)(s.br,{}),"\n","MongoDB was dismissed due to weaker relational capabilities and potential consistency issues."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The schema will follow relational best practices (e.g., separate tables for ",(0,r.jsx)(s.code,{children:"questions"}),", ",(0,r.jsx)(s.code,{children:"answers"}),", ",(0,r.jsx)(s.code,{children:"sets"}),", ",(0,r.jsx)(s.code,{children:"stories"}),", ",(0,r.jsx)(s.code,{children:"progress"}),")."]}),"\n",(0,r.jsx)(s.li,{children:"JSONB fields will be used for multilingual text and flexible properties."}),"\n",(0,r.jsxs)(s.li,{children:["If in the future ",(0,r.jsx)(s.strong,{children:"non-linear stories"})," or more complex relationships are introduced, a migration path to Neo4j remains possible (SQL data is easier to map to a graph than the reverse)."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var i=n(6540);const r={},t=i.createContext(r);function o(e){const s=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);